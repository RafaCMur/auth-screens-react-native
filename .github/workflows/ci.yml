name: CI Pipeline # Name of the GitHub Actions workflow

on:
  push:
    branches:
      - main # Runs workflow on every push to the main branch

jobs:
  lint: # Job to check code using ESLint
    runs-on: ubuntu-latest # Runs on Ubuntu virtual machine in the cloud

    steps:
      - name: Checkout code # Get the latest code from the repository
        uses: actions/checkout@v3

      - name: Install Node.js # Install Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18 # Node.js version 18

      - name: Install dependencies # Install project dependencies from package.json
        run: npm install

      - name: Run ESLint # Run ESLint to check for coding errors and style issues
        run: npx eslint . --ext .js,.jsx,.mjs || true # "|| true" prevents failure if errors exist

  build-android: # Job to build an Android APK
    runs-on: ubuntu-latest # Runs on an Ubuntu virtual machine

    steps:
      - name: Checkout code # Get the latest code from the repository
        uses: actions/checkout@v3

      - name: Install Node.js # Install Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies # Install project dependencies
        run: npm install

      - name: Login to Expo # Log in to Expo using a token stored in GitHub Secrets
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Build Android APK # Start the Android build process
        run: eas build -p android --profile production --non-interactive
        # -p android → Specifies Android build
        # --profile production → Uses "production" settings from eas.json
        # --non-interactive → Runs without asking for user input (required for CI/CD)

  ############################################################
  # IOS build is not included in this example, because it requires macOS environment
  # or an iphone simulator to run the built app.
  ############################################################

  # build-ios: # Job to build an iOS app
  #   runs-on: macos-latest # iOS builds require macOS

  #   steps:
  #     - name: Checkout code # Get the latest code from the repository
  #       uses: actions/checkout@v3

  #     - name: Install Node.js # Install Node.js environment
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #         cache: npm

  #     - name: Install dependencies # Install project dependencies
  #       run: npm install

  #     - name: Login to Expo # Log in to Expo using a token stored in GitHub Secrets
  #       uses: expo/expo-github-action@v8
  #       with:
  #         eas-version: latest
  #         token: ${{ secrets.EXPO_TOKEN }}

  #     - name: Build iOS App # Start the iOS build process
  #       run: eas build -p ios --profile production --non-interactive
  #       # -p ios → Specifies iOS build
  #       # --profile production → Uses "production" settings from eas.json
  #       # --non-interactive → Runs without asking for user input (required for CI/CD)
